"use strict";(self.webpackChunkgo_beyond=self.webpackChunkgo_beyond||[]).push([[641],{8295:(l,i)=>{i.A=(l,i)=>{const e=l.__vccOpts||l;for(const[l,t]of i)e[l]=t;return e}},1475:(l,i,e)=>{e.r(i),e.d(i,{comp:()=>a,data:()=>r});var t=e(4691);const n={},a=(0,e(8295).A)(n,[["render",function(l,i){return(0,t.uX)(),(0,t.CE)("div",null,i[0]||(i[0]=[(0,t.Fv)('<h1 id="架构学习概览" tabindex="-1"><a class="header-anchor" href="#架构学习概览"><span>架构学习概览</span></a></h1><h2 id="架构重点" tabindex="-1"><a class="header-anchor" href="#架构重点"><span>架构重点：</span></a></h2><ul><li>层次式架构</li><li>云原生架构</li><li>微服务架构</li><li>架构属性与架构评估</li><li>软件建模方法 <ul><li>结构化建模方法</li><li>面向对象建模方法等</li></ul></li><li>软件设计方法 <ul><li>结构化</li><li>面向对象</li></ul></li><li>各阶段的uml图，以及相关侧重点</li><li>模型驱动的软件工程(MBSE) SysML</li></ul><h2 id="架构风格" tabindex="-1"><a class="header-anchor" href="#架构风格"><span>架构风格</span></a></h2><ol><li>数据流风格：批处理风格 、 管道/过滤器风格</li><li>调用返回风格：主程序/子程序，面向对象，C/S，层次结构</li><li>虚拟机风格： 解释器风格，基于规则的系统</li><li>独立构件风格：进程通信，事件驱动</li><li>仓库风格：数据库，黑板，超文本</li></ol><h2 id="_4-1-视图" tabindex="-1"><a class="header-anchor" href="#_4-1-视图"><span>4+1 视图</span></a></h2><ul><li>逻辑视图</li><li>开发视图</li><li>进程视图</li><li>物理视图</li><li>场景视图</li></ul><h2 id="_4a架构图" tabindex="-1"><a class="header-anchor" href="#_4a架构图"><span>4A架构图</span></a></h2><ul><li>业务架构：Business Architecture <ul><li><strong>战略与流程的蓝图</strong></li></ul></li><li>应用架构：Application Architecture <ul><li>系统建设与集成的桥梁</li></ul></li><li>数据架构：Data Architecture <ul><li>数据的组织与管理</li></ul></li><li>技术架构：Technology Architecture <ul><li>技术选型与基础设施</li></ul></li></ul><p>​ 参考https://mp.weixin.qq.com/s/E-2fyNdbX7TuTF1LpnpJ-A</p><p>​ 4A架构是企业信息化建设的核心框架，它们相互依存、相互影响。理解并掌握这四种架构，将有助于企业在数字化转型过程中做出更明智的决策，提升整体运营效率和竞争力。</p><h2 id="架构图的应用场景" tabindex="-1"><a class="header-anchor" href="#架构图的应用场景"><span>架构图的应用场景</span></a></h2><p>在软件开发生命周期的不同阶段，架构图扮演着不同的角色：</p><ul><li><strong>需求分析阶段</strong>：用例图和活动图有助于定义系统功能，而状态图可以用来描绘对象状态的变化。</li><li><strong>概要设计阶段</strong>：则更多地使用部署图来规划系统的物理布局，以及组件图来描述软件模块。</li><li><strong>详细设计阶段</strong>：重点转向了类图和时序图，用于指导具体的编码实现。</li></ul><h2 id="todo清单" tabindex="-1"><a class="header-anchor" href="#todo清单"><span>TODO清单</span></a></h2><ul><li>整理软件从需求分析、架构设计、编码、测试的全流程指导手册 <ul><li>需求分析如何做(分析用例)</li><li>如何做架构设计（4A架构图、UML4+1视图，质量属性）</li><li>架构风格的选择，模块的划分，建模。架构文档的生成与案例</li><li>如何进行架构的评估</li><li>如何进行具体模块的概要设计与详细设计(面向对象、设计原则、设计模式、重构、编码规范)</li><li>写出高质量代码(面向对象、设计原则、设计模式、重构、编码规范)</li><li>进行单元测试</li><li>如何部署</li><li>如何运维。</li></ul></li><li>整理各个阶段的文档模板。</li></ul>',16)]))}]]),r=JSON.parse('{"path":"/architecture-design/","title":"架构学习概览","lang":"zh-CN","frontmatter":{"description":"架构学习概览 架构重点： 层次式架构 云原生架构 微服务架构 架构属性与架构评估 软件建模方法 结构化建模方法 面向对象建模方法等 软件设计方法 结构化 面向对象 各阶段的uml图，以及相关侧重点 模型驱动的软件工程(MBSE) SysML 架构风格 数据流风格：批处理风格 、 管道/过滤器风格 调用返回风格：主程序/子程序，面向对象，C/S，层次结构...","head":[["meta",{"property":"og:url","content":"https://sciencefl.github.io/architecture-design/"}],["meta",{"property":"og:site_name","content":"FlynnDocs 学习笔记"}],["meta",{"property":"og:title","content":"架构学习概览"}],["meta",{"property":"og:description","content":"架构学习概览 架构重点： 层次式架构 云原生架构 微服务架构 架构属性与架构评估 软件建模方法 结构化建模方法 面向对象建模方法等 软件设计方法 结构化 面向对象 各阶段的uml图，以及相关侧重点 模型驱动的软件工程(MBSE) SysML 架构风格 数据流风格：批处理风格 、 管道/过滤器风格 调用返回风格：主程序/子程序，面向对象，C/S，层次结构..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-03T01:45:41.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-03T01:45:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"架构学习概览\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-03T01:45:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flynn\\",\\"url\\":\\"https://sciencefl.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"架构重点：","slug":"架构重点","link":"#架构重点","children":[]},{"level":2,"title":"架构风格","slug":"架构风格","link":"#架构风格","children":[]},{"level":2,"title":"4+1 视图","slug":"_4-1-视图","link":"#_4-1-视图","children":[]},{"level":2,"title":"4A架构图","slug":"_4a架构图","link":"#_4a架构图","children":[]},{"level":2,"title":"架构图的应用场景","slug":"架构图的应用场景","link":"#架构图的应用场景","children":[]},{"level":2,"title":"TODO清单","slug":"todo清单","link":"#todo清单","children":[]}],"git":{"createdTime":1731920812000,"updatedTime":1733190341000,"contributors":[{"name":"fuliang","email":"fuliang@ssc-hn.com","commits":4}]},"readingTime":{"minutes":2.21,"words":663},"filePathRelative":"architecture-design/README.md","localizedDate":"2024年11月18日","excerpt":"\\n<h2>架构重点：</h2>\\n<ul>\\n<li>层次式架构</li>\\n<li>云原生架构</li>\\n<li>微服务架构</li>\\n<li>架构属性与架构评估</li>\\n<li>软件建模方法\\n<ul>\\n<li>结构化建模方法</li>\\n<li>面向对象建模方法等</li>\\n</ul>\\n</li>\\n<li>软件设计方法\\n<ul>\\n<li>结构化</li>\\n<li>面向对象</li>\\n</ul>\\n</li>\\n<li>各阶段的uml图，以及相关侧重点</li>\\n<li>模型驱动的软件工程(MBSE) SysML</li>\\n</ul>\\n<h2>架构风格</h2>\\n<ol>\\n<li>数据流风格：批处理风格  、 管道/过滤器风格</li>\\n<li>调用返回风格：主程序/子程序，面向对象，C/S，层次结构</li>\\n<li>虚拟机风格： 解释器风格，基于规则的系统</li>\\n<li>独立构件风格：进程通信，事件驱动</li>\\n<li>仓库风格：数据库，黑板，超文本</li>\\n</ol>","autoDesc":true}')}}]);