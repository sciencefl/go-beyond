"use strict";(self.webpackChunkgo_beyond=self.webpackChunkgo_beyond||[]).push([[870],{8295:(e,t)=>{t.A=(e,t)=>{const a=e.__vccOpts||e;for(const[e,n]of t)a[e]=n;return a}},989:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>i,data:()=>s});var n=a(4691);const r={},i=(0,a(8295).A)(r,[["render",function(e,t){return(0,n.uX)(),(0,n.CE)("div",null,t[0]||(t[0]=[(0,n.Fv)('<h1 id="设计模式总结" tabindex="-1"><a class="header-anchor" href="#设计模式总结"><span>设计模式总结</span></a></h1><p>​ 创建型主要解决的是“对象的创建”问题。结构型解决的是“类或队形的组合和组装”问题，行为型解决的是“类或对象的交互”问题。</p><h2 id="_01-创建型" tabindex="-1"><a class="header-anchor" href="#_01-创建型"><span>01| 创建型</span></a></h2><h3 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式"><span>单例模式</span></a></h3><blockquote><p>Captures and externalizes an object’s internal state so that it can be restored later, all without violating encapsulation.</p></blockquote><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义：</span></a></h4><h4 id="应用场景-设计意图" tabindex="-1"><a class="header-anchor" href="#应用场景-设计意图"><span>应用场景(设计意图)：</span></a></h4><p>​ 即这个模式可以解决哪类问题。</p><h4 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案：</span></a></h4><p>第二部分是解决方案，即这个模式的设计思路和具体的代码实现</p><h4 id="应用举例" tabindex="-1"><a class="header-anchor" href="#应用举例"><span>应用举例：</span></a></h4><h2 id="_02-结构型" tabindex="-1"><a class="header-anchor" href="#_02-结构型"><span>02| 结构型</span></a></h2><h2 id="_03-行为型" tabindex="-1"><a class="header-anchor" href="#_03-行为型"><span>03| 行为型</span></a></h2>',13)]))}]]),s=JSON.parse('{"path":"/architecture-design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93.html","title":"设计模式总结","lang":"zh-CN","frontmatter":{"article":true,"title":"设计模式总结","icon":"fa6-solid:list","order":2,"category":"设计模式","tag":["设计模式"],"description":"设计模式总结 ​ 创建型主要解决的是“对象的创建”问题。结构型解决的是“类或队形的组合和组装”问题，行为型解决的是“类或对象的交互”问题。 01| 创建型 单例模式 Captures and externalizes an object’s internal state so that it can be restored later, all wit...","head":[["meta",{"property":"og:url","content":"https://sciencefl.github.io/architecture-design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"FlynnDocs 学习笔记"}],["meta",{"property":"og:title","content":"设计模式总结"}],["meta",{"property":"og:description","content":"设计模式总结 ​ 创建型主要解决的是“对象的创建”问题。结构型解决的是“类或队形的组合和组装”问题，行为型解决的是“类或对象的交互”问题。 01| 创建型 单例模式 Captures and externalizes an object’s internal state so that it can be restored later, all wit..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-05T08:51:01.000Z"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2024-12-05T08:51:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式总结\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-05T08:51:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Flynn\\",\\"url\\":\\"https://sciencefl.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"01| 创建型","slug":"_01-创建型","link":"#_01-创建型","children":[{"level":3,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]}]},{"level":2,"title":"02| 结构型","slug":"_02-结构型","link":"#_02-结构型","children":[]},{"level":2,"title":"03| 行为型","slug":"_03-行为型","link":"#_03-行为型","children":[]}],"git":{"createdTime":1733282628000,"updatedTime":1733388661000,"contributors":[{"name":"fuliang","email":"fuliang@ssc-hn.com","commits":4}]},"readingTime":{"minutes":0.58,"words":175},"filePathRelative":"architecture-design/设计模式总结.md","localizedDate":"2024年12月4日","excerpt":"\\n<p>​\\t\\t创建型主要解决的是“对象的创建”问题。结构型解决的是“类或队形的组合和组装”问题，行为型解决的是“类或对象的交互”问题。</p>\\n<h2>01| 创建型</h2>\\n<h3>单例模式</h3>\\n<blockquote>\\n<p>Captures and externalizes an object’s internal state so that it can be restored later, all without violating encapsulation.</p>\\n</blockquote>\\n<h4>定义：</h4>\\n<h4>应用场景(设计意图)：</h4>\\n<p>​\\t即这个模式可以解决哪类问题。</p>","autoDesc":true}')}}]);